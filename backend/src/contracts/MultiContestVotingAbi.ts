/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface MultiContestVotingAbiInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addCandidate"
      | "createVote"
      | "endVote"
      | "getCandidate"
      | "operator"
      | "vote"
      | "voteCount"
      | "votes"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "CandidateAdded" | "VoteCreated" | "Voted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addCandidate",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createVote",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "endVote",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCandidate",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "operator", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "voteCount", values?: undefined): string;
  encodeFunctionData(functionFragment: "votes", values: [BigNumberish]): string;

  decodeFunctionResult(
    functionFragment: "addCandidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createVote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "endVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCandidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "operator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "voteCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "votes", data: BytesLike): Result;
}

export namespace CandidateAddedEvent {
  export type InputTuple = [
    voteId: BigNumberish,
    candidateId: BigNumberish,
    name: string
  ];
  export type OutputTuple = [voteId: bigint, candidateId: bigint, name: string];
  export interface OutputObject {
    voteId: bigint;
    candidateId: bigint;
    name: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoteCreatedEvent {
  export type InputTuple = [
    voteId: BigNumberish,
    startTime: BigNumberish,
    endTime: BigNumberish
  ];
  export type OutputTuple = [
    voteId: bigint,
    startTime: bigint,
    endTime: bigint
  ];
  export interface OutputObject {
    voteId: bigint;
    startTime: bigint;
    endTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VotedEvent {
  export type InputTuple = [
    voteId: BigNumberish,
    voter: AddressLike,
    candidateId: BigNumberish
  ];
  export type OutputTuple = [
    voteId: bigint,
    voter: string,
    candidateId: bigint
  ];
  export interface OutputObject {
    voteId: bigint;
    voter: string;
    candidateId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MultiContestVotingAbi extends BaseContract {
  connect(runner?: ContractRunner | null): MultiContestVotingAbi;
  waitForDeployment(): Promise<this>;

  interface: MultiContestVotingAbiInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addCandidate: TypedContractMethod<
    [voteId: BigNumberish, _name: string],
    [void],
    "nonpayable"
  >;

  createVote: TypedContractMethod<
    [_startTime: BigNumberish, _endTime: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  endVote: TypedContractMethod<[voteId: BigNumberish], [void], "nonpayable">;

  getCandidate: TypedContractMethod<
    [voteId: BigNumberish, _candidateId: BigNumberish],
    [[string, bigint] & { name: string; votesCount: bigint }],
    "view"
  >;

  operator: TypedContractMethod<[], [string], "view">;

  vote: TypedContractMethod<
    [voteId: BigNumberish, _candidateId: BigNumberish],
    [void],
    "nonpayable"
  >;

  voteCount: TypedContractMethod<[], [bigint], "view">;

  votes: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, boolean] & {
        startTime: bigint;
        endTime: bigint;
        candidateCount: bigint;
        ended: boolean;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addCandidate"
  ): TypedContractMethod<
    [voteId: BigNumberish, _name: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createVote"
  ): TypedContractMethod<
    [_startTime: BigNumberish, _endTime: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "endVote"
  ): TypedContractMethod<[voteId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getCandidate"
  ): TypedContractMethod<
    [voteId: BigNumberish, _candidateId: BigNumberish],
    [[string, bigint] & { name: string; votesCount: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "operator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "vote"
  ): TypedContractMethod<
    [voteId: BigNumberish, _candidateId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "voteCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "votes"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, boolean] & {
        startTime: bigint;
        endTime: bigint;
        candidateCount: bigint;
        ended: boolean;
      }
    ],
    "view"
  >;

  getEvent(
    key: "CandidateAdded"
  ): TypedContractEvent<
    CandidateAddedEvent.InputTuple,
    CandidateAddedEvent.OutputTuple,
    CandidateAddedEvent.OutputObject
  >;
  getEvent(
    key: "VoteCreated"
  ): TypedContractEvent<
    VoteCreatedEvent.InputTuple,
    VoteCreatedEvent.OutputTuple,
    VoteCreatedEvent.OutputObject
  >;
  getEvent(
    key: "Voted"
  ): TypedContractEvent<
    VotedEvent.InputTuple,
    VotedEvent.OutputTuple,
    VotedEvent.OutputObject
  >;

  filters: {
    "CandidateAdded(uint256,uint256,string)": TypedContractEvent<
      CandidateAddedEvent.InputTuple,
      CandidateAddedEvent.OutputTuple,
      CandidateAddedEvent.OutputObject
    >;
    CandidateAdded: TypedContractEvent<
      CandidateAddedEvent.InputTuple,
      CandidateAddedEvent.OutputTuple,
      CandidateAddedEvent.OutputObject
    >;

    "VoteCreated(uint256,uint256,uint256)": TypedContractEvent<
      VoteCreatedEvent.InputTuple,
      VoteCreatedEvent.OutputTuple,
      VoteCreatedEvent.OutputObject
    >;
    VoteCreated: TypedContractEvent<
      VoteCreatedEvent.InputTuple,
      VoteCreatedEvent.OutputTuple,
      VoteCreatedEvent.OutputObject
    >;

    "Voted(uint256,address,uint256)": TypedContractEvent<
      VotedEvent.InputTuple,
      VotedEvent.OutputTuple,
      VotedEvent.OutputObject
    >;
    Voted: TypedContractEvent<
      VotedEvent.InputTuple,
      VotedEvent.OutputTuple,
      VotedEvent.OutputObject
    >;
  };
}
